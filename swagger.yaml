---
openapi: 3.0.1
info:
  title: AtomBooking, The Flights Search API
  description: The AtomBooking api, is a flights search api, which provides its consumers
    to search flights from origin to destination from all the airlines. It is a consumer
    of Amadeus Travel APIs https://developers.amadeus.com/
  contact:
    name: Syed Ammad Hassan
    url: https://www.linkedin.com/in/syed-ammad-hassan
    email: ammad13k@gmail.com
  license:
    name: MIT License
    url: https://choosealicense.com/licenses/mit/
  version: '1.0'
servers:
- url: http://localhost:8080
  description: Api URL in Dev Environment
- url: http://localhost:8080
  description: APi URL in Prod Environment
tags:
- name: Main Controller
  description: The controller that contains all the endpoints
paths:
  "/v1/flights-api/get-offers":
    get:
      tags:
      - Main Controller
      - Search Flight Offers
      summary: Retrieve Flight Offers from multiple airlines
      description: Find the flight offers from multiple airlines all over the world.
      operationId: getFlightOffers
      parameters:
      - name: originLocationCode
        in: query
        required: true
        schema:
          type: string
      - name: destinationLocationCode
        in: query
        required: true
        schema:
          type: string
      - name: departureDate
        in: query
        required: true
        schema:
          type: string
      - name: returnDate
        in: query
        required: false
        schema:
          type: string
      - name: adults
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: nonStop
        in: query
        required: true
        schema:
          type: boolean
      - name: consumer-name
        in: header
        required: true
        schema:
          type: string
      - name: request-uuid
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/FlightOffersResponse"
        '400':
          description: "| Code    | Title |\r\n| --------| ------- |\r\n| 425     |
            INVALID DATE    |\r\n| 477     | INVALID FORMAT    |\r\n| 2668     | PARAMETER
            COMBINATION INVALID/RESTRICTED    |\r\n| 4926     | INVALID DATA RECEIVED
            \   |\r\n| 10661     | MAXIMUM NUMBER OF OCCURRENCES EXCEEDED    |\r\n|
            32171     | MAXIMUM NUMBER OF OCCURRENCES EXCEEDED    |\r\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              examples:
                Request Error:
                  description: Request Error
                  value:
                    errors:
                    - status: 400
                      code: 477
                      title: INVALID FORMAT
                      detail: invalid query parameter format
                      source:
                        parameter: airport
                        example: CDG
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              examples:
                Unexpected Error:
                  description: Unexpected Error
                  value:
                    errors:
                    - status: 500
                      code: 141
                      title: SYSTEM ERROR HAS OCCURRED
  "/v1/flights-api/get-city-and-airport/{keyword}":
    get:
      tags:
      - Main Controller
      - Search Cities
      - Search Airports
      summary: Retrieve city and associated airport information by providing keyword
      description: Find city and associated airports by providing keyword. The keyword
        can match a city name or an airport. This endpoint supports searching city
        or airport by providing the keyword, It Response would contain the cities
        with associated airports
      operationId: getCityAndAirports
      parameters:
      - name: keyword
        in: path
        required: true
        schema:
          type: string
      - name: consumer-name
        in: header
        required: true
        schema:
          type: string
      - name: request-uuid
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/LocationApiAggregatedResponse"
        '400':
          description: "| Code    | Title |\r\n| --------| ------- |\r\n| 572     |
            INVALID OPTION    |\r\n"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              examples:
                Request Error:
                  description: Request Error
                  value:
                    errors:
                    - status: 400
                      code: 477
                      title: INVALID FORMAT
                      detail: invalid query parameter format
                      source:
                        parameter: airport
                        example: CDG
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              examples:
                Not Found:
                  description: Not Found
                  value:
                    errors:
                    - status: 404
                      code: 1797
                      title: NOT FOUND
                      detail: no response found for this query parameter
                      source:
                        parameter: airport
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              examples:
                Unexpected Error:
                  description: Unexpected Error
                  value:
                    errors:
                    - status: 500
                      code: 141
                      title: SYSTEM ERROR HAS OCCURRED
components:
  schemas:
    Aircraft:
      type: object
      properties:
        code:
          type: string
    Aircraft__1:
      type: object
      properties:
        '320':
          type: string
        '744':
          type: string
        '777':
          type: string
    Arrival:
      type: object
      properties:
        iataCode:
          type: string
        at:
          type: string
    Carriers:
      type: object
      properties:
        6X:
          type: string
    Currencies:
      type: object
      properties:
        USD:
          type: string
    Data:
      type: object
      properties:
        type:
          type: string
        id:
          type: string
        source:
          type: string
        instantTicketingRequired:
          type: boolean
        nonHomogeneous:
          type: boolean
        oneWay:
          type: boolean
        lastTicketingDate:
          type: string
        numberOfBookableSeats:
          type: integer
          format: int32
        itineraries:
          type: array
          items:
            "$ref": "#/components/schemas/Itinerary"
        price:
          "$ref": "#/components/schemas/Price"
        pricingOptions:
          "$ref": "#/components/schemas/PricingOptions"
        validatingAirlineCodes:
          type: array
          items:
            type: string
        travelerPricings:
          type: array
          items:
            "$ref": "#/components/schemas/TravelerPricing"
    Departure:
      type: object
      properties:
        iataCode:
          type: string
        at:
          type: string
    Dictionaries:
      type: object
      properties:
        locations:
          "$ref": "#/components/schemas/Locations"
        aircraft:
          "$ref": "#/components/schemas/Aircraft__1"
        currencies:
          "$ref": "#/components/schemas/Currencies"
        carriers:
          "$ref": "#/components/schemas/Carriers"
    Ewr:
      type: object
      properties:
        cityCode:
          type: string
        countryCode:
          type: string
    FareDetailsBySegment:
      type: object
      properties:
        segmentId:
          type: string
        cabin:
          type: string
        fareBasis:
          type: string
        class:
          type: string
        includedCheckedBags:
          "$ref": "#/components/schemas/IncludedCheckedBags"
    Fee:
      type: object
      properties:
        amount:
          type: string
        type:
          type: string
    FlightOffersResponse:
      type: object
      properties:
        data:
          type: array
          items:
            "$ref": "#/components/schemas/Data"
        dictionaries:
          "$ref": "#/components/schemas/Dictionaries"
    IncludedCheckedBags:
      type: object
      properties:
        quantity:
          type: integer
          format: int32
    Itinerary:
      type: object
      properties:
        duration:
          type: string
        segments:
          type: array
          items:
            "$ref": "#/components/schemas/Segment"
    Jfk:
      type: object
      properties:
        cityCode:
          type: string
        countryCode:
          type: string
    Lhr:
      type: object
      properties:
        cityCode:
          type: string
        countryCode:
          type: string
    Locations:
      type: object
      properties:
        EWR:
          "$ref": "#/components/schemas/Ewr"
        MAD:
          "$ref": "#/components/schemas/Mad"
        LHR:
          "$ref": "#/components/schemas/Lhr"
        JFK:
          "$ref": "#/components/schemas/Jfk"
    Mad:
      type: object
      properties:
        cityCode:
          type: string
        countryCode:
          type: string
    Operating:
      type: object
      properties:
        carrierCode:
          type: string
    Price:
      type: object
      properties:
        currency:
          type: string
        total:
          type: string
        base:
          type: string
        fees:
          type: array
          items:
            "$ref": "#/components/schemas/Fee"
        grandTotal:
          type: string
    Price__1:
      type: object
      properties:
        currency:
          type: string
        total:
          type: string
        base:
          type: string
    PricingOptions:
      type: object
      properties:
        fareType:
          type: array
          items:
            type: string
        includedCheckedBagsOnly:
          type: boolean
    Segment:
      type: object
      properties:
        departure:
          "$ref": "#/components/schemas/Departure"
        arrival:
          "$ref": "#/components/schemas/Arrival"
        carrierCode:
          type: string
        number:
          type: string
        aircraft:
          "$ref": "#/components/schemas/Aircraft"
        operating:
          "$ref": "#/components/schemas/Operating"
        duration:
          type: string
        id:
          type: string
        numberOfStops:
          type: integer
          format: int32
        blacklistedInEU:
          type: boolean
    TravelerPricing:
      type: object
      properties:
        travelerId:
          type: string
        fareOption:
          type: string
        travelerType:
          type: string
        price:
          "$ref": "#/components/schemas/Price__1"
        fareDetailsBySegment:
          type: array
          items:
            "$ref": "#/components/schemas/FareDetailsBySegment"
    Error:
      type: object
      properties:
        status:
          type: integer
          format: int32
        code:
          type: integer
          format: int32
        title:
          type: string
        detail:
          type: string
        source:
          "$ref": "#/components/schemas/Source"
    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            "$ref": "#/components/schemas/Error"
    Source:
      type: object
      properties:
        parameter:
          type: string
        example:
          type: string
    Address:
      type: object
      properties:
        cityName:
          type: string
        cityCode:
          type: string
        countryName:
          type: string
        countryCode:
          type: string
        stateCode:
          type: string
        regionCode:
          type: string
    Datum:
      type: object
      properties:
        type:
          type: string
        subType:
          type: string
        name:
          type: string
        detailedName:
          type: string
        id:
          type: string
        iataCode:
          type: string
        address:
          "$ref": "#/components/schemas/Address"
    Datum2:
      type: object
      properties:
        type:
          type: string
        subType:
          type: string
        name:
          type: string
        detailedName:
          type: string
        id:
          type: string
        iataCode:
          type: string
        address:
          "$ref": "#/components/schemas/Address"
        airports:
          type: array
          items:
            "$ref": "#/components/schemas/Datum"
    LocationApiAggregatedResponse:
      type: object
      properties:
        data:
          type: array
          items:
            "$ref": "#/components/schemas/Datum2"
